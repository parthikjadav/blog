// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id                String   @id @default(uuid())
  slug              String   @unique
  title             String
  description       String
  content           String   @db.Text // MDX content as string
  excerpt           String?
  
  // Metadata
  published         Boolean  @default(false)
  featured          Boolean  @default(false)
  scheduledFor      DateTime? // For post scheduling
  publishedAt       DateTime?
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())
  
  // SEO
  keywords          String   // JSON array stored as string
  featuredImage     String?
  featuredImageAlt  String?
  
  // Content info
  author            String
  readingTime       Int      // in minutes
  
  // Relationships
  categoryId        String
  category          Category @relation(fields: [categoryId], references: [id])
  tags              PostTag[]
  
  @@index([slug])
  @@index([published])
  @@index([publishedAt])
  @@index([scheduledFor])
  @@index([categoryId])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  
  posts       Post[]
  
  @@index([slug])
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  
  posts     PostTag[]
  
  @@index([slug])
}

model PostTag {
  id        String   @id @default(uuid())
  postId    String
  tagId     String
  
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

model Topic {
  id          String   @id @default(uuid())
  slug        String   @unique
  title       String
  description String?
  icon        String?  // Icon name for sidebar
  order       Int      // Display order
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  sections    Section[]
  lessons     Lesson[]
  
  @@index([slug])
  @@index([published])
  @@index([order])
}

model Section {
  id          String   @id @default(uuid())
  slug        String
  title       String
  description String?
  icon        String?  // Optional icon for section
  order       Int      // Order within topic
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  topicId     String
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  
  @@unique([topicId, slug])
  @@index([topicId, order])
  @@index([slug])
  @@index([published])
}

model Lesson {
  id          String   @id @default(uuid())
  slug        String
  title       String
  description String?
  content     String   @db.Text  // MDX content
  order       Int      // Order within topic or section
  published   Boolean  @default(false)
  duration    Int?     // Estimated reading time in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  topicId     String
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  
  sectionId   String?
  section     Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  @@unique([topicId, slug])
  @@index([slug])
  @@index([published])
  @@index([topicId, order])
  @@index([sectionId, order])
}
